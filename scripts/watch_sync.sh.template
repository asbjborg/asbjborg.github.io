#!/bin/zsh

# Load environment
source .env

# Set defaults for optional variables
SYNC_INTERVAL=${SYNC_INTERVAL:-300}  # Default to 5 minutes
SYNC_SITE_ROOT=${SYNC_SITE_ROOT:-$SYNC_JEKYLL_ROOT}
PYTHON_CMD=${SYNC_PYTHON_PATH:-"python"}

# Set paths
LOG_DIR="${SYNC_LOG_DIR:-$SYNC_SITE_ROOT/LOGS}"
PID_FILE="$LOG_DIR/.watch.pid"
LAST_SYNC_FILE="$LOG_DIR/.last_sync"
CHANGES_FILE="$LOG_DIR/.pending_changes"

# Create LOGS directory if it doesn't exist
mkdir -p "$LOG_DIR"

# Check if already running
if [ -f "$PID_FILE" ]; then
    OLD_PID=$(cat "$PID_FILE")
    if kill -0 "$OLD_PID" 2>/dev/null; then
        echo "Already running with PID $OLD_PID"
        exit 1
    else
        echo "Removing stale PID file"
        rm "$PID_FILE"
    fi
fi

# Store our PID
echo $$ > "$PID_FILE"

# Function to clean up
cleanup() {
    echo "Cleaning up..."
    rm -f "$PID_FILE" "$CHANGES_FILE"
    exit 0
}

# Set up trap for cleanup
trap cleanup EXIT INT TERM

# Function to check if enough time has passed since last sync
can_sync() {
    if [ ! -f "$LAST_SYNC_FILE" ]; then
        return 0  # No last sync file, allow sync
    fi
    
    local last_sync=$(cat "$LAST_SYNC_FILE")
    local now=$(date +%s)
    local elapsed=$((now - last_sync))
    
    if [ $elapsed -ge $SYNC_INTERVAL ]; then
        return 0  # Enough time has passed
    else
        echo "Next sync in $((SYNC_INTERVAL - elapsed)) seconds"
        return 1  # Not enough time has passed
    fi
}

# Function to run sync
run_sync() {
    if [ -f "$CHANGES_FILE" ]; then
        cd "$SYNC_SITE_ROOT"
        echo "Running sync at $(date)"
        echo "Changes since last sync:"
        cat "$CHANGES_FILE"
        ./scripts/sync_wrapper.sh
        date +%s > "$LAST_SYNC_FILE"
        rm -f "$CHANGES_FILE"
    fi
}

# Function to record change
record_change() {
    echo "$(date): $1" >> "$CHANGES_FILE"
    echo "Change recorded, will sync within $((SYNC_INTERVAL/60)) minutes"
}

# Initial sync on startup
run_sync

# Start periodic sync in background
(while true; do
    sleep 60  # Check every minute
    if can_sync; then
        run_sync
    fi
done) &

# Watch for changes
fswatch -r -L -0 --event Created --event Updated --event Removed "$SYNC_VAULT_ROOT/$SYNC_VAULT_ATOMICS" | while read -d "" event; do
    if [[ "$event" == *.md ]]; then
        echo "Change detected in: $event"
        record_change "$event"
    fi
done 
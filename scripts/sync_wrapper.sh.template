#!/bin/zsh

# Get the site root directory
SITE_ROOT="$PWD"
LOG_DIR="$SITE_ROOT/LOGS"
LOCK_FILE="$LOG_DIR/.sync.lock"
STATE_FILE="$LOG_DIR/.sync.state"

# Function to clean up on exit
cleanup() {
    local exit_code=$?
    echo "Cleaning up..."
    [ -f "$LOCK_FILE" ] && rm -f "$LOCK_FILE"
    [ -f "$STATE_FILE" ] && rm -f "$STATE_FILE"
    cleanup_old_logs
    exit $exit_code
}

# Function to clean up old log files
cleanup_old_logs() {
    cd "$LOG_DIR" || return
    # Keep only the 30 most recent sync_*.log files
    ls -t sync_*.log | tail -n +31 | xargs rm -f 2>/dev/null
    # Remove any stray .log files older than 24 hours
    find . -name "*.log" -type f -mtime +1 -delete 2>/dev/null
    cd "$SITE_ROOT" || return
}

# Set up trap for cleanup
trap cleanup EXIT INT TERM

# Create LOGS directory
mkdir -p "$LOG_DIR"

# Check for lock file
if [ -f "$LOCK_FILE" ]; then
    # Check if the process is actually running
    if [ -f "$STATE_FILE" ]; then
        LOCK_PID=$(cat "$STATE_FILE")
        if kill -0 "$LOCK_PID" 2>/dev/null; then
            echo "Another sync process is running (PID: $LOCK_PID)"
            exit 1
        fi
    fi
    echo "Stale lock file found, removing..."
    rm -f "$LOCK_FILE"
    rm -f "$STATE_FILE"
fi

# Create lock file and state file
echo $$ > "$LOCK_FILE"
echo $$ > "$STATE_FILE"

# Generate log filename
LOG_FILE="$LOG_DIR/sync_$(date +%Y%m%d_%H%M%S).log"

# Function to write status to cronlog
write_status() {
    local status_type=$1
    local status_msg=$2
    local current_time=$(date '+%Y-%m-%d %H:%M:%S')
    local cutoff_time=$(date -v-24H '+%Y-%m-%d %H:%M:%S')
    
    # Create new content with entries from last 24 hours
    {
        echo "# Sync Status Log"
        echo "Showing sync status for the last 24 hours. Older entries are automatically removed."
        echo ""
        echo "| Timestamp | Status | Log | Message |"
        echo "|-----------|--------|-----|---------|"
        # Add new entry
        echo "| $current_time | $status_type | [Details]($(basename $LOG_FILE)) | $status_msg |"
        # Filter and add existing entries from last 24 hours
        if [ -f "$LOG_DIR/cronlog.md" ]; then
            grep -A 1000 "^|" "$LOG_DIR/cronlog.md" | grep "^|" | grep -v "Timestamp" | while read -r line; do
                entry_time=$(echo "$line" | cut -d'|' -f2 | xargs)
                if [[ "$entry_time" > "$cutoff_time" ]]; then
                    echo "$line"
                fi
            done
        fi
    } > "$LOG_DIR/cronlog.md.tmp"
    
    mv "$LOG_DIR/cronlog.md.tmp" "$LOG_DIR/cronlog.md"
}

# Create cronlog if it doesn't exist
if [ ! -f "$LOG_DIR/cronlog.md" ]; then
    echo "# Sync Status Log" > "$LOG_DIR/cronlog.md"
    echo "Showing sync status for the last 24 hours. Older entries are automatically removed." >> "$LOG_DIR/cronlog.md"
    echo "" >> "$LOG_DIR/cronlog.md"
    echo "| Timestamp | Status | Log | Message |" >> "$LOG_DIR/cronlog.md"
    echo "|-----------|--------|-----|---------|" >> "$LOG_DIR/cronlog.md"
fi

# Run sync with error handling
{
    cd "$SITE_ROOT" || { write_status "ERROR" "Failed to change directory"; exit 1; }
    source .env || { write_status "ERROR" "Failed to load environment"; exit 1; }
    
    # Activate virtual environment
    source .venv/bin/activate || { write_status "ERROR" "Failed to activate virtual environment"; exit 1; }
    
    # Run Python with modified environment
    if ! PYTHONPATH="$SITE_ROOT/scripts" \
         PYTHONDEVMODE=1 \
         PYTHONMALLOC=malloc \
         PYTHONFAULTHANDLER=1 \
         PYTHONUNBUFFERED=1 \
         PYTHONHASHSEED=random \
         OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES \
         python -X utf8 -X dev scripts/sync.py 2>&1; then
        write_status "ERROR" "Python script failed"
        exit 1
    fi
    
    # Deactivate virtual environment
    deactivate
} 2>&1 | tee -a "$LOG_FILE"

SYNC_EXIT=${PIPESTATUS[0]}
if [ "$SYNC_EXIT" -ne 0 ]; then
    write_status "ERROR" "Sync failed with exit code $SYNC_EXIT"
    exit $SYNC_EXIT
else
    # Check if there were any changes
    if grep -q "\[SYNC_CHANGE\]" "$LOG_FILE"; then
        CHANGES=$(grep "\[SYNC_CHANGE\]" "$LOG_FILE" | wc -l | tr -d ' ')
        write_status "SUCCESS" "$CHANGES changes applied"
    else
        write_status "SUCCESS" "No changes needed"
    fi
fi

# Check if we're on main branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" = "main" ]; then
    # Check for changes in _posts and assets only
    CHANGES=$(git status --porcelain -- _posts assets)
    if [ -n "$CHANGES" ]; then
        # Double check if there are actual changes to commit
        git add _posts assets
        STAGED_CHANGES=$(git diff --cached --quiet; echo $?)
        if [ "$STAGED_CHANGES" = "1" ]; then
            echo "Changes detected in _posts or assets, committing and pushing..."
            TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
            git commit -m "sync: Update from Obsidian vault ($TIMESTAMP)"
            git push
        else
            echo "No actual changes to commit"
        fi
    else
        echo "No changes in _posts or assets"
    fi
fi

# Output success
echo "Sync completed successfully" 